import keras
import cv2
import numpy as np
import keras.backend as K
import math
import os
from PIL import Image
from keras import layers
from keras.layers import Lambda
from keras.models import Model
from keras.layers import Input, Dense, Dropout, BatchNormalization, Conv2D, MaxPooling2D, AveragePooling2D, concatenate, \
    Activation, ZeroPadding2D
from keras.layers import add, Flatten
from keras.utils import plot_model
from keras.metrics import top_k_categorical_accuracy
from keras.preprocessing.image import ImageDataGenerator
from keras.models import load_model
from keras.optimizers import SGD, RMSprop, Adam
from keras.models import Sequential
from keras.utils import np_utils
from keras.callbacks import ReduceLROnPlateau,ModelCheckpoint,EarlyStopping,LearningRateScheduler,Callback,TensorBoard
from keras.applications import ResNet50,MobileNet, DenseNet201, InceptionV3, NASNetLarge, InceptionResNetV2, NASNetMobile
from keras.utils.np_utils import to_categorical
from keras.models import Sequential
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,f1_score,recall_score,precision_score,roc_auc_score
import scipy
from tqdm import tqdm
import tensorflow as tf
from keras import backend as K
import gc
from functools import partial
from sklearn import metrics
from collections import Counter
import json
import itertools
from sklearn.metrics import classification_report
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import confusion_matrix

# from keras.applications.resnet50 import preprocess_input
from keras.preprocessing.image import load_img,img_to_array
# from Restet_50 import resnet_50
from Xception import xception_model

K.set_learning_phase(1) #set learning phase

# #需根据自己情况修改1.训练好的模型路径和图像路径
# filepath = r'/home/user001/Twj/Github/1/test1/weights.best.hdf5'
# img_path = r'/home/user001/Twj/Github/1/test1/1---YYY-HE-40X-195.jpg'
#
# model = keras.models.load_model(filepath)
# image = load_img(img_path,target_size=(224,224))
#
# x = img_to_array(image)
# x = np.expand_dims(x,axis=0)
# x = preprocess_input(x)

#1. 处理图片
# Transfer 'jpg' images to an array IMG
def Dataset_loader(DIR, RESIZE, sigmaX=10):
    IMG = []
    read = lambda imname: np.asarray(Image.open(imname).convert("RGB"))
    for IMAGE_NAME in tqdm(os.listdir(DIR)):
        # print(IMAGE_NAME)
        PATH = os.path.join(DIR, IMAGE_NAME)
        _, ftype = os.path.splitext(PATH)
        if ftype == ".png":
            img = read(PATH)

            img = cv2.resize(img, (RESIZE, RESIZE))

            IMG.append(np.array(img))
    return IMG

img_path = r'D:/PyCharm/github/breast-cancer-classification-master/1'

# img = np.array(Dataset_loader(r'/home/user001/Twj/Github/1/test1/1---YYY-HE-40X-195.jpg', 224))
img = np.array(Dataset_loader(img_path, 224))

#2. 处理标签
label = np.array([1])
label = to_categorical(label)

#3. 加载模型
base_model = xception_model(width = 224,height = 224,channel = 3,classes = 4)

#4. 加载自己的权重
# filepath = r'/home/user001/Twj/Github/1/test1/weights.best.hdf5'
filepath = r'D:/PyCharm/github/breast-cancer-classification-master/Models/weights.best.hdf5'

x = base_model.output
out = Dense(4, activation='softmax')(x)
model = Model(inputs=base_model.input, outputs=out)

model.load_weights(filepath)

#5. 预测
pred = model.predict(img)
# print(pred.shape)
class_idx = np.argmax(pred[0])

class_output = model.output[:,class_idx]
#需根据自己情况修改2. 把block5_conv3改成自己模型最后一层卷积层的名字
last_conv_layer = model.get_layer("block14_sepconv2")

grads = K.gradients(class_output,last_conv_layer.output)[0]
pooled_grads = K.mean(grads,axis=(0,1,2))
iterate = K.function([model.input],[pooled_grads,last_conv_layer.output[0]])
pooled_grads_value, conv_layer_output_value = iterate([img])
##需根据自己情况修改3. 512是我最后一层卷基层的通道数，根据自己情况修改
for i in range(2048):
    conv_layer_output_value[:,:,i] *= pooled_grads_value[i]

heatmap = np.mean(conv_layer_output_value, axis=-1)
heatmap = np.maximum(heatmap,0)
heatmap /= np.max(heatmap)

img_path = './1/1---YYY-HE-40X-195.png'
img = cv2.imread(img_path)
img = cv2.resize(img, dsize=(224,224))
# img = cv2.resize(img, dsize=(224,224), interpolation=cv2.INTER_NEAREST)
# img = img_to_array(img)
heatmap = cv2.resize(heatmap,(img.shape[1],img.shape[0]))
heatmap = np.uint8(255 * heatmap)
heatmap = cv2.applyColorMap(heatmap,cv2.COLORMAP_JET)
superimposed_img = cv2.addWeighted(img,0.6,heatmap,0.4,0)
cv2.imshow('Grad-cam',superimposed_img)
cv2.waitKey(0)
cv2.imwrite('twj.png', superimposed_img)